//
// Forms
// --------------------------------------------------

// Normalize non-controls
//
// Restyle and baseline non-control form elements.
label {
  display: inline-block;
  margin-bottom: 5px;
}

// Normalize form controls
//
// While most of our form styles require extra classes, some basic normalization
// is required to ensure optimum display with or without those classes to better
// address browser inconsistencies.

// Focus for file, radio, and checkbox
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
  .tab-focus();
}

// Common form controls
.form-control {
  display: block;
  width: 100%;
  height: @input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  padding: (@padding-base-input-vertical - @input-border-width) (@padding-base-input-horizontal - @input-border-width);
  font-size: @font-size-base;
  line-height: @line-height-base;
  color: @input-color;
  background-color: @input-bg;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: @input-border-width solid @input-border;
  border-radius: @input-border-radius; // Note: This has no effect on <select>s in some browsers, due to the limited stylability of <select>s in CSS.
  transition: @input-transition;

  // Placeholder
  &::placeholder {
    color: @input-color-placeholder;
  }

  &:focus,
  &:hover {
    border-color: @input-border-focus;
    outline: 0;
  }

  &[disabled] {
    background-color: @input-bg-disabled;
    color: @input-color-disabled;
    cursor: @cursor-disabled;
  }

  // Reset height for `textarea`
  textarea& {
    height: auto;
    resize: none;
  }
}

// Form control sizing
.input-xs {
  .input-size(@input-height-xs; @padding-xs-vertical; @padding-base-input-horizontal; @font-size-small; @line-height-base; @input-border-radius);
}

.input-lg {
  .input-size(@input-height-large; @padding-large-vertical; @padding-base-input-horizontal; @font-size-large; @line-height-large; @input-border-radius);
}

.input-sm {
  .input-size(@input-height-small; @padding-small-vertical; @padding-base-input-horizontal; @font-size-base; @line-height-base; @input-border-radius);
}

// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
  margin-bottom: @form-group-margin-bottom;
}

// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.radio,
.checkbox {
  position: relative;
  display: block;

  // These classes are used on elements with <label> descendants
  &.disabled,
  fieldset[disabled] & {
    label {
      cursor: @cursor-disabled;
    }
  }

  label {
    line-height: 1.1428571428571428; //  @checkbox-width-height/@font-size-base = 16px/14px
    margin-bottom: 0;
    font-weight: normal;
    cursor: pointer;
  }
}

.checkbox label:hover .checkbox-inner::before {
  border-color: @checkbox-checked-border-color;
}

.radio label:hover .radio-inner::before {
  border-color: @radio-checked-border-color;
}

.checkbox.checkbox-disabled label,
.radio.radio-disabled label {
  cursor: not-allowed;
}

.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
  position: absolute;
  top: 0;
  left: 0;
  z-index: @zindex-input;
}

// Radios and checkboxes on same line
.radio-inline,
.checkbox-inline {
  position: relative;
  display: inline-block;
  margin-bottom: 0;
  vertical-align: middle;
  font-weight: normal;
  cursor: pointer;

  &.disabled,
  fieldset[disabled] & {
    cursor: @cursor-disabled;
  }
}

.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {
  margin-top: 0;
  margin-left: 10px; // space out consecutive inline controls
}

// Form control error states
.has-error {
  //.form-control-validation(@state-danger-text; @state-danger-text; @state-danger-bg);

  .help-block.error {
    color: @state-error-text;
    animation-name: shake;
    animation-duration: .5s;
    animation-fill-mode: both;
    animation-timing-function: ease-in-out;
  }
}

// Help text
//
// Apply to any element you wish to create light text for placement immediately
// below a form control. Use for general help, formatting, or instructional text.

.help-block {
  display: block; // account for any element using help-block
  margin: 5px 0;
  color: lighten(@text-color, 25%); // lighten the text some for contrast
  //Sometimes help info is more than one lineï¼Œso height can't set a fixed value
  min-height: 16.8px;
  line-height: 16.8px;
}

// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).
//
// Heads up! This is mixin-ed into `.navbar-form` in navbars.less.

.form-inline {
  > *,
  > .btn {
    margin-right: @base-unit-px;
    margin-bottom: @base-unit-px;
  }
}

// Horizontal forms
//
// Horizontal forms are built on grid classes and allow you to create forms with
// labels on the left and inputs on the right.

.form-horizontal {

  // Consistent vertical alignment of radios and checkboxes
  //
  // Labels also get some reset styles, but that is scoped to a media query below.
  .radio,
  .checkbox,
  .radio-inline,
  .checkbox-inline {
    margin-top: 0;
    margin-bottom: 0;
    padding-top: (@padding-base-vertical + 1); // Default padding plus a border
  }
  // Account for padding we're adding to ensure the alignment and of help text
  // and other content below items
  .radio,
  .checkbox {
    min-height: (@line-height-computed + (@padding-base-vertical + 1));
  }

  // Make form groups behave like rows
  .form-group {
    .make-row();
  }

  // Validation states
  //
  // Reposition the icon because it's now within a grid column and columns have
  // `position: relative;` on them. Also accounts for the grid gutter padding.
  .has-feedback .form-control-feedback {
    right: floor((@grid-gutter-width / 2));
  }

  //adjust radio padding
  .radio-list .radio-inline {
    padding-top: 6px;

    .radio {
      padding-top: 4px;
    }
  }

  .checkboxList .checkbox-inline {
    padding-top: 6px;

    .checkbox {
      padding-top: 4px;
    }
  }
}
