// Button variants
.button-primary-variant(@color; @background) {
    @background-dark: color(~`palette("@{background}", 600)`);
    @background-darker: color(~`palette("@{background}", 700)`);
    @background-even-darker: color(~`palette("@{background}", 800)`);

    color: @color;
    background-color: @background;
    .btn-icon-with-text(@background-dark);

    &:focus,
    &.focus {
        color: @color;
        background-color: @background-dark;
        .btn-icon-with-text(@background-darker);
    }

    &:hover {
        color: @color;
    }

    &:not(.disabled):hover {
        background-color: @background-dark;
        .btn-icon-with-text(@background-darker);
    }

    &:active,
    &.@{ns}btn-active,
    .@{ns}open > .@{ns}dropdown-toggle& {
        color: @color;
        background-color: @background-darker;
        .btn-icon-with-text(@background-even-darker);

        &:hover,
        &:focus,
        &.focus {
            color: @color;
            background-color: @background-darker;
            .btn-icon-with-text(@background-even-darker);
        }
    }

    &:active,
    &.@{ns}btn-active,
    .open > .@{ns}dropdown-toggle& {
        background-image: none;
    }

    &.@{ns}btn-disabled,
    &[disabled],
    fieldset[disabled] &,
    .@{ns}dropdown-disabled & {
        &:hover,
        &:focus,
        &.focus {
            background: @background;
        }
    }
}

.btn-link-variant(@color) {
    @color-dark: color(~`palette("@{color}", 600)`);
    @color-darker: color(~`palette("@{color}", 700)`);
    color: @color;
    font-weight: normal;
    border-radius: 0;

    &,
    &:active,
    &.active,
    &[disabled],
    fieldset[disabled] & {
        background-color: transparent;
    }

    &,
    &:hover,
    &:focus,
    &:active {
        border-color: transparent;
    }

    &:hover,
    &:focus {
        color: @color-dark;
        text-decoration: @link-hover-decoration;
        background-color: transparent;
    }

    &:active {
        color: @color-darker;
        text-decoration: none;

        &:hover,
        &:focus,
        &.focus {
            color: @color-darker;
        }
    }

    &[disabled],
    fieldset[disabled] & {
        &:hover,
        &:focus {
            color: @color;
            text-decoration: none;
        }
    }
}

.btn-subtle-variant(@color) {
    @color-dark: color(~`palette("@{color}", 600)`);
    @color-darker: color(~`palette("@{color}", 700)`);

    color: @btn-subtle-color;
    background-color: transparent;

    &:focus,
    &.focus,
    &:hover {
        color: @btn-subtle-hover-color;
    }

    &:focus,
    &.focus {
        background-color: @btn-subtle-focus-bg;
    }

    &:hover {
        background-color: @btn-subtle-hover-bg;
    }

    &:active,
    &.@{ns}btn-active,
    .@{ns}open > .@{ns}dropdown-toggle& {
        color: @color;
        background-color: @btn-subtle-active-bg;

        &:hover,
        &:focus,
        &.focus {
            color: @color-dark;
            background-color: @btn-subtle-active-bg;
        }
    }

    &:active,
    &.@{ns}btn-active,
    .@{ns}open > .@{ns}dropdown-toggle& {
        background-image: none;
    }

    &.@{ns}btn-disabled,
    &[disabled],
    fieldset[disabled] &,
    .@{ns}dropdown-disabled & {
        &:hover,
        &:focus,
        &.focus {
            background: none;
        }
    }
}

.btn-ghost-variant(@color,@border-color) {
    @color-dark: color(~`palette("@{color}", 600)`);
    @color-darker: color(~`palette("@{color}", 700)`);
    @color-border-dark: color(~`palette("@{color}", 600)`);
    @color-border-darker: color(~`palette("@{color}", 700)`);

    color: @color;
    border: 1px solid @border-color;
    background-color: transparent;

    &:focus,
    &.focus {
        color: @color-dark;
        border-color: @color-border-dark;
    }

    &:hover {
        color: @color-dark;
        border-color: @color-border-dark;
    }

    &:active,
    &.@{ns}btn-active,
    .@{ns}open > .@{ns}dropdown-toggle& {
        color: @color-darker;
        border-color: @color-border-darker;

        &:hover,
        &:focus,
        &.focus {
            color: @color-darker;
            border-color: @color-border-darker;
        }
    }

    &:active,
    &.@{ns}btn-active,
    .@{ns}open > .@{ns}dropdown-toggle& {
        background-image: none;
    }

    &.@{ns}btn-disabled,
    &[disabled],
    fieldset[disabled] &,
    .@{ns}dropdown-disabled & {
        &:hover,
        &:focus,
        &.focus {
            background: none;
        }
    }
}

// General spectrum buttons
.generate-spectrum-primary-btns(@i:length(@spectrum)) when (@i>0) {
    .generate-spectrum-primary-btns(@i - 1);
    @name: extract(@spectrum, @i);
    @backgroud-color: @@name;
    &.@{ns}btn-@{name} {
        .button-primary-variant(@btn-primary-color, @backgroud-color);
    }
}

.generate-spectrum-link-btns(@i:length(@spectrum)) when (@i>0) {
    .generate-spectrum-link-btns(@i - 1);
    @name: extract(@spectrum, @i);
    @color: @@name;
    &.@{ns}btn-@{name} {
        .btn-link-variant(@color);
    }
}

.generate-spectrum-subtle-btns(@i:length(@spectrum)) when (@i>0) {
    .generate-spectrum-subtle-btns(@i - 1);
    @name: extract(@spectrum, @i);
    @color: @@name;
    &.@{ns}btn-@{name} {
        .btn-subtle-variant(@color);
    }
}

.generate-spectrum-ghost-btns(@i:length(@spectrum)) when (@i>0) {
    .generate-spectrum-ghost-btns(@i - 1);
    @name: extract(@spectrum, @i);
    @color: @@name;
    @border-color: @color;
    &.@{ns}btn-@{name} {
        .btn-ghost-variant(@color, @border-color);
    }
}

// Button sizes
.button-size(@padding-vertical; @padding-horizontal; @font-size; @line-height; @border-radius) {
    @icon-width: @padding-vertical*2 + floor(@font-size*@line-height);
    padding: @padding-vertical @padding-horizontal;
    font-size: @font-size;
    line-height: @line-height;
    border-radius: @border-radius;

    &.@{ns}btn-ghost {
        // Ghost button has 1px border
        padding-top: (@padding-vertical - 1);
        padding-bottom: (@padding-vertical - 1);
    }

    // Button icon is a circle.
    &.@{ns}btn-icon {
        padding-left: @icon-width - @padding-horizontal;
        height: @icon-width;
        position: relative;

        &.btn-icon-with-text {
            &.btn-icon-placement-left {
                padding-left: @icon-width + @padding-vertical;
            }

            &.btn-icon-placement-right {
                padding-right: @icon-width + @padding-vertical;

                > .icon {
                    left: auto;
                    right: 0;
                }
            }
        }

        > .icon {
            position: absolute;
            top: 0;
            left: 0;
            display: block;
            width: @icon-width;
            height: @icon-width;
            padding: @padding-vertical 0;
            font-size: @font-size;
            line-height: @line-height;
        }
    }

    &.@{ns}btn-icon-circle {
        width: @icon-width;
        padding: @padding-vertical;
    }
}

// Button ripple
.button-ripple(@transition:background-color .3s linear, border-bottom-color .3s linear;) when (@button-ripple = true) {
    overflow: hidden;
    position: relative;
    transition: @transition;

    &:not(.@{ns}disabled) {
        &:after {
            content: "";
            display: block;
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            pointer-events: none;
            background-image: radial-gradient(circle, #000 10%, rgba(0, 0, 0, 0) 10.01%);
            background-repeat: no-repeat;
            background-position: 50%;
            transform: scale(10);
            opacity: 0;
            transition: transform .5s, opacity 1s;
        }

        &:active:after {
            transform: scale(0);
            opacity: .2;
            transition: 0s;
        }
    }
}

// Icon Button with text
.btn-icon-with-text(@bg) {
    &.btn-icon.btn-icon-with-text > .icon {
        background: @bg;
    }
}

// Button transition
.btn-transition() {
    transition: color .2s linear, background-color .3s linear;
}

.btn-transition(color) {
    transition: color .2s linear;
}

.btn-transition(color-and-border) {
    transition: color .2s linear, border-color .3s linear;
}
